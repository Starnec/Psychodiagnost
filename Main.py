import time
import sys

def hello(): #Сбор данных пользователя

    global name
    global age
    global sex
    a = 0
    print("Привет! Я электронный психодиагност :)                       **    **    **")           
    print("                                                              **   **   **")
    print("Version 1.0                                                    **********")
    print("                                                                   **")
    print("Разработчик: Ovchinnikov Alexey (c)                                **")
    print("                                                                  ****")
    name = input("\nКак Вас зовут? ")
    while (a==0):
        age  = input("Сколько Вам лет? ")
        try:
            age = int(age)
            if (age<100)==True:
                a=1
            else:
                print("\nНеверная команда")
        except (ValueError, TypeError):
            print("\nНеверная команда")
    while (a==1):    
        sex = input("Укажите Ваш пол (м/ж): ")
        if (sex=="м")==True or (sex=="ж")==True:
            a = 0
        else:
            print("\nНеверная команда")
    whattest()

def scaleBek(): #Шкала депрессии Бека

    global rez
    global rez2
    global axfin
    global axfin2
    rez =0
    axfin = 0
    ax1 = 0
    x = 0


    quest = []   
    quest.append ("1 - Я не чувствую себя расстроенным, печальным \n\
2 - Я расстроен \n\
3 - Я все время расстроен и не могу от этого отключиться \n\
4 - Я настолько расстроен и несчастлив, что не могу это выдержать\n")
    quest.append ("1 - Я не тревожусь о своем будущем \n\
2 - Я чувствую, что озадачен будушим \n\
3 - Я чувствую, что меня ничего не ждет в будущем \n\
4 - Мое будущее безнадежно, и ничто не может измениться к лучшему\n")
    quest.append ("1 - Я не чувствую себя неудачником \n\
2 - Я чувствую, что терпел больше неудач, чем другие люди \n\
3 - Когда я оглядываюсь на свою жизнь, я вижу в ней много неудач \n\
4 - Я чувствую, что как личность я - полный неудачник\n")
    quest.append ("1 - Я получаю столько же удовлетворения от жизни, как раньше \n\
2 - Я не получаю столько же удовлетворения от жизни, как раньше \n\
3 - Я больше не получаю удовлетворения ни от чего \n\
4 - Я полностью не удовлетворен жизнью. и мне все надоело\n")
    quest.append ("1 - Я не чувствую себя в чем-нибудь виноватым \n\
2 - Достаточно часто я чувствую себя виноватым \n\
3 - Большую часть времени я чувствую себя виноватым \n\
4 - Я постоянно испытываю чувство вины\n")
    quest.append ("1 - Я не чувствую, что могу быть наказанным за что-либо \n\
2 - Я чувствую, что могу быть наказан \n\
3 - Я ожидаю, что могу быть наказан \n\
4 - Я чувствую себя уже наказанным\n")
    quest.append ("1 - Я не разочаровался в себе \n\
2 - Я разочаровался в себе \n\
3 - Я себе противен \n\
4 - Я себя ненавижу\n")
    quest.append ("1 - Я знаю, что я не хуже других \n\
2 - Я критикую себя за ошибки и слабости \n\
3 - Я все время обвиняю себя за свои поступки \n\
4 - Я виню себя во всем плохом, что происходит\n")
    quest.append ("1 - Я никогда не думал покончить с собой \n\
2 - Ко мне приходят мысли покончить с собой, но я не буду их осуществлять \n\
3 - Я хотел бы покончить с собой \n\
4 - Я бы убил себя, если бы представился случай\n")
    quest.append ("1 - Я плачу не больше, чем обычно \n\
2 - Сейчас я плачу чаще, чем раньше \n\
3 - Теперь я все время плачу \n\
4 - Раньше я мог плакать, а сейчас не могу, даже если мне хочется\n")
    quest.append ("1 - Сейчас я раздражителен не более, чем обычно \n\
2 - Я более легко раздражаюсь, чем раньше \n\
3 - Теперь я постоянно чувствую, что раздражен \n\
4 - Я стал равнодушен к вещам, которые меня раньше раздражали\n")
    quest.append ("1 - Я не утратил интереса к другим людям \n\
2 - Я меньше интересуюсь другими людьми, чем раньше \n\
3 - Я почти потерял интерес к другим людям \n\
4 - Я полностью утратил интерес к другим людям\n")
    quest.append ("1 - Я откладываю принятие решения иногда, как и раньше \n\
2 - Я чаще, чем раньше, откладываю принятие решения \n\
3 - Мне труднее принимать решения, чем раньше \n\
4 - Я больше не могу принимать решения\n")
    quest.append ("1 - Я не чувствую, что выгляжу хуже, чем обычно \n\
2 - Меня тревожит, что я выгляжу старым и непривлекательным \n\
3 - Я знаю, что в моей внешности произошли существенные изменения, делающие меня непривлекательным \n\
4 - Я знаю, что выгляжу безобразно\n")
    quest.append ("1 - Я могу работать так же хорошо, как и раньше \n\
2 - Мне необходимо сделать дополнительное усилие, чтобы начать делать что-нибудь \n\
3 - Я с трудом заставляю себя делать что-либо \n\
4 - Я совсем не могу выполнять никакую работу\n")
    quest.append ("1 - Я сплю так же хорошо, как и раньше \n\
2 - Сейчас я сплю хуже, чем раньше \n\
3 - Я просыпаюсь на 1-2 часа раньше, и мне трудно заснуть опять \n\
4 - Я просыпаюсь на несколько часов раньше обычного и больше не могу заснуть\n")
    quest.append ("1 - Я устаю не больше, чем обычно \n\
2 - Теперь я устаю быстрее, чем раньше \n\
3 - Я устаю почти от всего, что я делаю \n\
4 - Я не могу ничего делать из-за усталости\n")
    quest.append ("1 - Мой аппетит не хуже, чем обычно \n\
2 - Мой аппетит стал хуже, чем раньше \n\
3 - Мой аппетит теперь значительно хуже \n\
4 - У меня вообще нет аппетита\n")
    quest.append ("1 - В последнее время я не похудел или потеря веса была незначительной \n\
2 - За последнее время я потерял более 2 кг \n\
3 - Я потерял более 5 кг \n\
4 - Я потерял более 7 кr\n")
    quest.append ("1 - Я беспокоюсь о своем здоровье не больше, чем обычно \n\
2 - Меня тревожат проблемы моего физического здоровья, такие, как боли, расстройство желудка, запоры и т.д. \n\
3 - Я очень обеспокоен своим физическим состоянием, и мне трудно думать о чем-либо другом \n\
4 - Я настолько обеспокоен своим физическим состоянием, что больше ни о чем не могу думать\n")
    quest.append ("1 - В последнее время я не замечал изменения своего интереса к сексу \n\
2 - Меня меньше занимают проблемы секса, чем раньше \n\
3 - Сейчас я значительно меньше интересуюсь сексуальными проблемами, чем раньше \n\
4 - Я полностью утратил сексуальный интерес\n")
    
 
    while (x<21):
        while (ax1 != "1") and (ax1 != "2") and (ax1 != "3") and (ax1 != "4"):
            ax1 = input(quest[x] + "Ваш ответ: ")
            if (ax1 == "1"):
                axfin = axfin + 0
                print("\n")
            elif (ax1 == "2"):
                axfin = axfin + 1
                print("\n")
            elif (ax1 == "3"):
                axfin = axfin + 2
                print("\n")
            elif (ax1 == "4"):
                axfin = axfin + 3
                print("\n")
            else:
                print("\n")
                continue
        x = x + 1
        ax1 = 0
    
    if (axfin<10):
        print("\n" + name + ", у Вас нет депрессивных симптомов")
        rez = "У Вас нет депрессивных симптомов"
    elif (9<axfin<16):
        print("\n" + name + ", у Вас легкая депрессия")
        rez = "У Вас легкая депрессия"
    elif (15<axfin<20):
        print("\n" + name + ", у Вас умеренная депрессия")
        rez = "У Вас умеренная депрессия"
    elif (19<axfin<30):
        print("\n" + name + ", у Вас выраженная депрессия")
        rez = "У Вас выраженная депрессия"
    elif (29<axfin<64):
        print("\n" + name + ", у Вас тяжелая депрессия")
        rez = "У Вас тяжелая депрессия"

    save(("Имя: " + name + "\nВозраст: " + str(age) +
          " лет\n" + str(axfin) + " баллов\n" + "Результат теста: " + rez))

def trevogaSH(): #Шкала тревожности Спилбергера-Ханина

    global rez
    global rez2
    global rezG
    global axfin
    global axfin2
    global axfinG
    global idtest
    idtest = "a"
    rez = 0
    rez2 = 0
    rezG = 0
    axfin = 0
    axfin2 = 0
    axfinG = 0
    ax1 = 0
    x = 0
    yesno = "\n1 - Никогда \n2 - Почти никогда \n3 - Часто \n4 - Почти всегда\n"
    
    quest = []
    quest.append ("Я спокоен" + yesno)
    quest.append ("Мне ничто не угрожает" + yesno)
    quest.append ("Я нахожусь в напряжении" + yesno)
    quest.append ("Я внутренне скован" + yesno)
    quest.append ("Я чувствую себя свободно" + yesno)
    quest.append ("Меня волнуют возможные неудачи" + yesno)
    quest.append ("Я ощущаю душевный покой" + yesno)
    quest.append ("Я встревожен" + yesno)
    quest.append ("Я испытываю чувство внутреннего удовлетворения" + yesno)
    quest.append ("Я уверен в себе" + yesno)
    quest.append ("Я нервничаю" + yesno)
    quest.append ("Я не нахожу себе места" + yesno)
    quest.append ("Я взвинчен" + yesno)
    quest.append ("Я не чувствую скованности, напряжения" + yesno)
    quest.append ("Я доволен" + yesno)
    quest.append ("Я озабочен" + yesno)
    quest.append ("Я слишком возбужден и мне не по себе" + yesno)
    quest.append ("Мне радостно" + yesno)
    quest.append ("Мне приятно" + yesno)
    quest.append ("У меня бывает приподнятое настроение" + yesno)
    quest.append ("Я бываю раздражительным" + yesno)
    quest.append ("Я легко расстраиваюсь" + yesno)
    quest.append ("Я хотел бы быть таким же удачливым, как и другие" + yesno)
    quest.append ("Я сильно переживаю неприятности и долго не могу о них забыть" + yesno)
    quest.append ("Я чувствую прилив сил и желание работать" + yesno)
    quest.append ("Я спокоен, хладнокровен и собран" + yesno)
    quest.append ("Меня тревожат возможные трудности" + yesno)
    quest.append ("Я слишком переживаю из-за пустяков" + yesno)
    quest.append ("Я бываю вполне счастлив" + yesno)
    quest.append ("Я все принимаю близко к сердцу" + yesno)
    quest.append ("Мне не хватает уверенности в себе" + yesno)
    quest.append ("Я чувствую себя беззащитным" + yesno)
    quest.append ("Я стараюсь избегать критических ситуаций и трудностей" + yesno)
    quest.append ("У меня бывает хандра" + yesno)
    quest.append ("Я бываю доволен" + yesno)
    quest.append ("Всякие пустяки отвлекают и волнуют меня" + yesno)
    quest.append ("Бывает, что я чувствую себя неудачником" + yesno)
    quest.append ("Я уравновешенный человек" + yesno)
    quest.append ("Меня охватывает беспокойство, когда я думаю о своих делах и заботах" + yesno)
    quest.append ("Я спокоен" + yesno)

    while (x<20):
        while (ax1 != "1") and (ax1 != "2") and (ax1 != "3") and (ax1 != "4"):
            ax1 = input(quest[x] + "Ваш ответ: ")
            if ((x == 0) or (x == 1) or (x == 4) or (x == 7) or (x == 9) or (x == 10) or (x == 14) or (x == 15) or (x == 18) or (x == 19)) and ((ax1 == "1") or (ax1 == "2") or (ax1 == "3") or (ax1 == "4")): 
                if (ax1 == "1"):
                    axfin = axfin + 4
                    print("\n")
                elif (ax1 == "2"):
                    axfin = axfin + 3
                    print("\n")
                elif (ax1 == "3"):
                    axfin = axfin + 2
                    print("\n")
                elif (ax1 == "4"):
                    axfin = axfin + 1
                    print("\n")
            elif ((x == 2) or (x == 3) or (x == 5) or (x == 6) or (x == 8) or (x == 11) or (x == 12) or (x == 13) or (x == 16) or (x == 17)) and ((ax1 == "1") or (ax1 == "2") or (ax1 == "3") or (ax1 == "4")): 
                if (ax1 == "1"):
                    axfin = axfin + 1
                    print("\n")
                elif (ax1 == "2"):
                    axfin = axfin + 2
                    print("\n")
                elif (ax1 == "3"):
                    axfin = axfin + 3
                    print("\n")
                elif (ax1 == "4"):
                    axfin = axfin + 4
                    print("\n")
            else:
                    print("\n")
                    continue        
        x = x + 1
        ax1 = 0

    while (x<40):
        while (ax1 != "1") and (ax1 != "2") and (ax1 != "3") and (ax1 != "4"):
            ax1 = input(quest[x] + "Ваш ответ: ")
            if ((x == 20) or (x == 25) or (x == 26) or (x == 29) or (x == 35) or (x == 38)) and ((ax1 == "1") or (ax1 == "2") or (ax1 == "3") or (ax1 == "4")): 
                if (ax1 == "1"):
                    axfin2 = axfin2 + 4
                    print("\n")
                elif (ax1 == "2"):
                    axfin2 = axfin2 + 3
                    print("\n")
                elif (ax1 == "3"):
                    axfin2 = axfin2 + 2
                    print("\n")
                elif (ax1 == "4"):
                    axfin2 = axfin2 + 1
                    print("\n")
                else:
                    print("\n")
                    continue
            elif ((x == 21) or (x == 22) or (x == 23) or (x == 24) or (x == 27) or (x == 28) or (x == 30) or (x == 31) or (x == 31) or (x == 33) or (x == 34)
                  or (x == 36) or (x == 37) or (x == 39)) and (ax1 != "1") and ((ax1 == "1") or (ax1 == "2") or (ax1 == "3") or (ax1 == "4")):
                if (ax1 == "1"):
                    axfin2 = axfin2 + 1
                    print("\n")
                elif (ax1 == "2"):
                    axfin2 = axfin2 + 2
                    print("\n")
                elif (ax1 == "3"):
                    axfin2 = axfin2 + 3
                    print("\n")
                elif (ax1 == "4"):
                    axfin2 = axfin2 + 4
                    print("\n")
            else:
                    print("\n")
                    continue
        x = x + 1
        ax1 = 0

    if (axfin<30):
        print("\n" + name + ", у Вас низкая ситуативная тревожность")
        rez = "У Вас низкая ситуативная тревожность"
    elif (29<axfin<45):
        print("\n" + name + ", у Вас умеренная ситуативная тревожность")
        rez = "У Вас умеренная ситуативная тревожность"
    elif (44<axfin):
        print("\n" + name + ", у Вас высокая ситуативная тревожность")
        rez = "У Вас высокая ситуативная тревожность"

    if (axfin2<30):
        print("\n" + name + ", у Вас низкая личностная тревожность")
        rez2 = "У Вас низкая личностная тревожность"
    elif (29<axfin2<45):
        print("\n" + name + ", у Вас умеренная личностная тревожность")
        rez2 = "У Вас умеренная личностная тревожность"
    elif (44<axfin2):
        print("\n" + name + ", у Вас высокая личностная тревожность")
        rez2 = "У Вас высокая личностная тревожность"

    save(("Имя: " + name + "\nВозраст: " + str(age) + " лет\n" + str(axfin)
          + " баллов ситуативной тревожности\n" + str(axfin2) +
          " баллов личностной тревожности\n" + "Ситуативная тревожность: " +
          rez + "\nЛичностная тревожность: " + rez2))


def mmpi(): #MMPI

    global L
    global F
    global K
    global Hs
    global D
    global Hy
    global Pd
    global MM
    global Mf
    global Pa
    global Pt
    global Sc
    global Ma
    global Si
    global idtest
    global axfin
    global axfin2
    axfin = 0
    ax1 = 0
    x = 0
    yesno = "\n1 - Да\n2 - Нет\n"


    z = 0
    answers = []
    while (z<566):
        answers.append (0)
        z=z+1
    
    if (sex == "м") and (age>17):
        f=open(u'mmpi(m).txt', 'r')
    elif (sex == "ж") and (age>17):
        f=open(u'mmpi(f).txt', 'r')
    elif (age<18):
        f=open(u'mmpi(t).txt', 'r')
     
    for y in f:
        while (ax1 != "1") and (ax1 != "2"):
            ax1 = input(y + yesno + "Ваш ответ: ")
            if (ax1 == "1"):
                answers[x] = 1
                print("\n")
            elif (ax1 == "2"):
                answers[x] = 0
                print("\n")
            else:
                print("\n")
                continue
        x = x + 1
        ax1 = 0
    

    
    L = 0
    F = 0
    K = 0
    Hs = 0
    D = 0
    Hy = 0
    Pd = 0
    MM = 0
    Mf = 0
    Pa = 0
    Pt = 0
    Sc = 0
    Ma = 0
    Si = 0
    
    scale1 = [[14, 23, 27, 31, 33, 34, 35, 40, 42, 48, 49, 50, 53, 56, 66, 85, 121,
            123, 139, 146, 151, 156, 168, 184, 197, 200, 202, 205, 206, 209, 210,
            211, 215, 218, 227, 245, 246, 247, 252, 256, 269, 275, 286, 291, 293],
             [96],
             [23, 29, 43, 62, 72, 108, 114, 125, 161, 189, 273],
             [5, 13, 23, 32, 41, 43, 52, 67, 86, 104, 130, 138, 142, 158, 159,
            182, 189, 193, 236, 259],
             [10, 23, 32, 43, 44, 47, 76, 114, 179, 186, 189, 238],
            [16, 21, 24, 32, 33, 35, 38, 42, 61, 67, 84, 94, 102, 106, 110, 118,
             127, 215, 216, 224, 239, 244, 245, 284],
             [4, 25, 26, 69, 70, 74, 77, 78, 87, 92, 126, 132, 134, 140, 149, 179,
             187, 203, 204, 217, 226, 231, 239, 261, 278, 282, 295, 297, 299],
             [4, 25, 26, 69, 70, 74, 77, 78, 87, 92, 126, 132, 134, 140, 149, 179,
             187, 203, 204, 217, 226, 231, 239, 261, 278, 282, 295, 297, 299],
            [15, 16, 22, 24, 27, 35, 110, 121, 123, 127, 151, 157, 158, 202, 275,
             284, 291, 293, 299, 305, 317, 338, 341, 364, 365],
             [10, 15, 22, 32, 41, 67, 76, 86, 94, 102, 106, 142, 159, 182, 189,
             217, 238, 266, 301, 304, 305, 317, 321, 336, 337, 340, 342, 343, 344,
             346, 349, 351, 352, 356, 357, 359, 360, 361],
             [15, 16, 21, 22, 24, 32, 33, 35, 38, 40, 41, 47, 52, 76, 97, 104, 121,
             156, 157, 159, 168, 179, 182, 194, 202, 210, 212, 238, 241, 251, 259,
             266, 273, 282, 291, 297, 301, 303, 305, 307, 312, 320, 324, 325, 332, 
             334, 335, 339, 341, 345, 349, 350, 352, 354, 355, 356, 360, 363, 364],
            [11, 13, 21, 22, 59, 64, 73, 97, 100, 109, 127, 134, 143, 156, 157,
             167, 181, 194, 212, 222, 226, 228, 232, 233, 238, 240, 250, 251, 263,
             266, 268, 271, 277, 279, 298],
            [32, 67, 82, 111, 117, 124, 138, 147, 171, 172, 180, 201, 236, 267,
             278, 292, 304, 316, 321, 332, 336, 342, 357, 377, 383, 398, 411, 427,
             436, 455, 473, 487, 549, 564]]

    scale2 = [[15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 195, 225, 255, 285],
            [17, 20, 54, 65, 75, 83, 112, 113, 115, 164, 169, 177, 185, 196, 199,
            220, 257, 258, 272, 276],
            [30, 39, 71, 89, 124, 129, 134, 138, 142, 148, 160, 170, 171,
            180, 183, 217, 234, 267, 272, 296, 316, 322, 374, 383, 397, 398, 406,
            461, 502],
            [2, 3, 7, 9, 18, 51, 55, 63, 68, 103, 130, 153, 155, 163, 175, 188, 190, 192, 230,
             243, 274, 281],
            [2, 8, 9, 18, 30, 36, 39, 45, 46, 51, 57, 58,
            64, 80, 88, 89, 95, 98, 107, 122, 131, 152, 153, 154, 155, 160, 178,
            191, 207, 208, 238, 241, 242, 248, 263, 270, 271, 272, 285, 296],
            [2, 3, 6, 7, 8,
             9, 12, 26, 30, 51, 55, 71, 89, 93, 103, 107, 109, 124, 128, 129,
             136, 137, 141, 147, 153, 160, 162, 163, 170, 172, 174, 175, 180,
             188, 190, 192, 201, 213, 230, 234, 243, 265, 267, 274, 279, 289, 292],
            [8, 20, 37, 82, 91, 96, 107, 134,
             137, 141, 155, 170, 171, 173, 180, 183, 201, 231, 235, 237, 248, 267,
             287, 289, 294, 296],
            [1, 19, 28, 79, 80, 81, 89, 99, 112, 115, 116, 117, 120, 133, 144, 176,
             198, 213, 214, 219, 221, 223, 229, 249, 254, 260, 262, 264, 280, 283, 300],
            [1, 19, 28, 79, 80, 81, 89, 99, 112, 115, 116, 117, 120, 133, 144, 176,
             198, 213, 214, 219, 221, 223, 229, 249, 254, 260, 262, 264, 280, 283, 300],
             [93, 107, 109, 111,
             117, 124, 268, 281, 294, 313, 316, 319, 327, 347, 348],
            [3, 8, 36, 122, 152, 164, 178, 329, 353],
            [8, 17, 20, 37, 65, 103, 119, 177, 178, 187, 192, 196, 220, 276, 281,
             306, 309, 322, 330],
            [101, 105, 111, 119, 120, 148, 166, 171, 180, 267, 289],
            [25, 33, 57, 91, 99, 119, 126, 143, 193,
             208, 229, 231, 254, 262, 281, 296, 309, 353, 359, 371, 391, 400, 415,
             440, 446, 449, 450, 451, 462, 469, 479, 481, 482, 505, 521, 547]]

    numQ = [45, 1, 11, 20, 12, 24, 29, 25, 25, 38, 59, 35, 36]

    numQ1 = [15, 20, 29, 22, 40, 47, 25, 31, 35, 15, 9, 19, 11, 34]
    
    scalesAB  = [F, K, Hs, D, Hy, Pd, MM, Mf, Pa, Pt, Sc, Ma, Si]

    scalesA  = [L, F, K, Hs, D, Hy, Pd, MM, Mf, Pa, Pt, Sc, Ma, Si]
    

    def prBall(g, h, i):
        x = 0
        while (x<g):
            ax1 = h - 1
            axfin = answers[ax1]
            if (axfin == 1):
                i = i + 1
                scalesAB[y] = i
            elif (axfin == 0):
                i = i + 0
                scalesAB[y] = i
            x = x + 1

    y = 0 
    while (y<13):
        g = numQ[y]
        h = scale1[y][x]
        i = scalesAB[y]
        prBall(g, h, i)
        y = y + 1


    def obrBall(g, h, i):
        x = 0
        while (x<g):
            ax1 = h - 1
            axfin = answers[ax1]
            if (axfin == 1):
                i = i + 0
                scalesA[y] = i
            elif (axfin == 0):
                i = i + 1
                scalesA[y] = i
            x = x + 1

    y = 0 
    while (y<14):
        g = numQ1[y]
        h = scale2[y][x]
        i = scalesA[y]
        obrBall(g, h, i)
        y = y + 1

    L = scalesA[0]
    F = scalesA[1] + scalesAB[0]
    K = scalesA[2] + scalesAB[1]
    Hs = scalesA[3] + scalesAB[2]
    D = scalesA[4] + scalesAB[3]
    Hy = scalesA[5] + scalesAB[4]
    Pd = scalesA[6] + scalesAB[5]
    MM = scalesA[7] + scalesAB[6]
    Mf = scalesA[8] + scalesAB[7]
    Pa = scalesA[9] + scalesAB[8]
    Pt = scalesA[10] + scalesAB[9]
    Sc = scalesA[11] + scalesAB[10]
    Ma = scalesA[12] + scalesAB[11]
    Si = scalesA[13] + scalesAB[12]

       
    print(L, "сырых баллов по шкале лжи")
    print(F, "сырых баллов по шкале достоверности")
    print(K, "сырых баллов по шкале коррекции")
    print(Hs, "сырых баллов по шкале сверхконтроля")
    print(D, "сырых баллов по шкале пессимистичности")
    print(Hy, "сырых баллов по шкале эмоциональной лабильности")
    print(Pd, "сырых баллов по шкале импульсивности")
    print(MM, "сырых баллов по шкале женственности")
    print(Mf, "сырых баллов по шкале мужественности")
    print(Pa, "сырых баллов по шкале ригидности")
    print(Pt, "сырых баллов по шкале тревожности")
    print(Sc, "сырых баллов по шкале индивидуалистичности")
    print(Ma, "сырых баллов по шкале оптимистичности")
    print(Si, "сырых баллов по шкале интроверсии")

    Pt = Pt + K
    Sc = Sc + K
    Hs = Hs + (K/2)
    Pd = Pd + (K/2.5)
    Ma = Ma + (K/5)

    scales = ["L", "F", "K", "Hs", "D", "Hy", "Pd", "MM", "Mf", "Pa", "Pt",
              "Sc", "Ma", "Si"]
    mM = [4.2, 2.76, 12.1, 11.1, 16.6, 16.46, 18.68, 20.46, 7.9, 23.06, 21.96,
          17.0, 25.0]
    mF = [4.2, 2.76, 12.1, 12.9, 18.9, 18.65, 18.68, 36.7, 7.9, 25.7, 22.73,
          17.0, 25.0]
    sigM = [2.9, 4.67, 5.4, 3.9, 4.11, 5.4, 4.11, 5.0, 3.4, 5.0, 5.0, 4.06, 10.0]
    sigF = [2.9, 4.67, 5.4, 4.83, 5.0, 5.38, 4.11, 4.67, 3.4, 6.1, 6.36, 4.06, 10.0]
    x = 0

    if (sex == "м"):
        L = 50 + (10*(L - mM[x])/sigM[x])
        x = x + 1
        F = 50 + (10*(F - mM[x])/sigM[x])
        x = x + 1
        K = 50 + (10*(K - mM[x])/sigM[x])
        x = x + 1
        Hs = 50 + (10*(Hs - mM[x])/sigM[x])
        x = x + 1
        D = 50 + (10*(D - mM[x])/sigM[x])
        x = x + 1
        Hy = 50 + (10*(Hy - mM[x])/sigM[x])
        x = x + 1
        Pd = 50 + (10*(Pd - mM[x])/sigM[x])
        x = x + 1
        MM = 50 + (10*(MM - mM[x])/sigM[x])
        x = x + 1
        Pa = 50 + (10*(Pa - mM[x])/sigM[x])
        x = x + 1
        Pt = 50 + (10*(Pt - mM[x])/sigM[x])
        x = x + 1
        Sc = 50 + (10*(Sc - mM[x])/sigM[x])
        x = x + 1
        Ma = 50 + (10*(Ma - mM[x])/sigM[x])
        x = x + 1
        Si = 50 + (10*(Si - mM[x])/sigM[x])
    elif (sex == "ж"):
        L = 50 + (10*(L - mF[x])/sigF[x])
        x = x + 1
        F = 50 + (10*(F - mF[x])/sigF[x])
        x = x + 1
        K = 50 + (10*(K - mF[x])/sigF[x])
        x = x + 1
        Hs = 50 + (10*(Hs - mF[x])/sigF[x])
        x = x + 1
        D = 50 + (10*(D - mF[x])/sigF[x])
        x = x + 1
        Hy = 50 + (10*(Hy - mF[x])/sigF[x])
        x = x + 1
        Pd = 50 + (10*(Pd - mF[x])/sigF[x])
        x = x + 1
        Mf = 50 + (10*(Mf - mF[x])/sigF[x])
        x = x + 1
        Pa = 50 + (10*(Pa - mM[x])/sigM[x])
        x = x + 1
        Pt = 50 + (10*(Pt - mF[x])/sigF[x])
        x = x + 1
        Sc = 50 + (10*(Sc - mF[x])/sigF[x])
        x = x + 1
        Ma = 50 + (10*(Ma - mF[x])/sigF[x])
        x = x + 1
        Si = 50 + (10*(Si - mF[x])/sigF[x])
    
    print("\n")
    print(L, "Т баллов по шкале лжи")
    print(F, "Т баллов по шкале достоверности")
    print(K, "Т баллов по шкале коррекции")
    print(Hs, "Т баллов по шкале сверхконтроля")
    print(D, "Т баллов по шкале пессимистичности")
    print(Hy, "Т баллов по шкале эмоциональной лабильности")
    print(Pd, "Т баллов по шкале импульсивности")
    print(MM, "Т баллов по шкале женственности")
    print(Mf, "Т баллов по шкале мужественности")
    print(Pa, "Т баллов по шкале ригидности")
    print(Pt, "Т баллов по шкале тревожности")
    print(Sc, "Т баллов по шкале индивидуалистичности")
    print(Ma, "Т баллов по шкале оптимистичности")
    print(Si, "Т баллов по шкале интроверсии")

    save(("Имя: " + name + "\nВозраст: " + str(age) + " лет\n" + str(L) + " Т баллов по шкале лжи\n" + str(F) + " Т баллов по шкале достоверности\n" + str(K) + " Т баллов по шкале коррекции\n" + str(Hs) + " Т баллов по шкале сверхконтроля\n" + str(D) + "Т баллов по шкале пессимистичности\n"\
       + str(Hy) + " Т баллов по шкале эмоциональной лабильности\n" + str(Pd) + " Т баллов по шкале импульсивности\n" + str(MM) + " Т баллов по шкале женственности\n" + str(Mf) + " Т баллов по шкале мужественности\n"\
        + str(Pa) + " Т баллов по шкале ригидности\n" + str(Pt) + " Т баллов по шкале тревожности\n" + str(Sc) + " Т баллов по шкале индивидуалистичности\n" + str(Ma) + " Т баллов по шкале оптимистичности\n" + str(Si)\
        + " Т баллов по шкале интроверсии\n"))

def whattest():
    wtest = input("\nКакой тест Вы хотите пройти?\
\n1 - Шкала депрессии Бека\n2 - Шкала тревоги Спилбергера-Ханина\n3 - MMPI (СМИЛ)\n4 - Я устал от тестов. Давайте завершим.\n")
    if (wtest == "1"):
        scaleBek()
    elif (wtest == "2"):
        trevogaSH()
    elif (wtest == "3"):
        mmpi()
    elif (wtest == "4"):
        print("\nУдачи Вам! :)")
        time.sleep(2)
        exit(0)
    else:
        print("\nНеверная команда")
        whattest()

def asv(): #Анализ семейных взаимоотношений

    global Gp
    global Gm
    global Up
    global Um
    global Tp
    global Tm
    global Zp
    global Zm
    global Sp
    global Sm
    global N
    global Rrch
    global Pdk
    global Vn
    global Fu
    global Nrch
    global Pnk
    global Vk
    global Pgk
    global Pmk
    global axfin
    global axfin2
    axfin = 0
    ax1 = 0
    x = 0
    yesno = "\n1 - Да\n2 - Нет\n"


    z = 0
    answers = []
    while (z<130):
        answers.append (1)
        z=z+1
    
    f=open(u'АСВ.txt', 'r')
    for y in f:
        while (ax1 != "1") and (ax1 != "2"):
            ax1 = input(y + yesno + "Ваш ответ: ")
            if (ax1 == "1"):
                answers[x] = 1
                print("\n")
            elif (ax1 == "2"):
                answers[x] = 0
                print("\n")
            else:
                print("\n")
                continue
        x = x + 1
        ax1 = 0
    

    Gp = 0
    Gm = 0
    Up = 0
    Um = 0
    Tp = 0
    Tm = 0
    Zp = 0
    Zm = 0
    Sp = 0
    Sm = 0
    N = 0
    Rrch = 0
    Pdk = 0
    Vn = 0
    Fu = 0
    Nrch = 0
    Pnk = 0
    Vk = 0
    Pgk = 0
    Pmk = 0
    

    scale = [[1, 21, 41, 61, 81, 101, 107, 113, 119, 125],
             [2, 22, 42, 62, 82, 102, 108, 114, 120, 126],
             [3, 23, 43, 63, 83, 103, 109, 115, 121, 127],
             [4, 24, 44, 64, 84],
             [5, 25, 45, 65, 85],
             [6, 26, 46, 66, 86],
             [7, 27, 47, 67, 87],
             [8, 28, 48, 68, 88],
             [9, 29, 49, 69, 89],
             [10, 30, 50, 70, 90],
             [11, 31, 51, 71, 91],
             [12, 32, 52, 72, 92, 104, 110, 116, 122, 128],
             [13, 33, 53, 73, 93],
             [14, 34, 54, 74, 94],
             [15, 35, 55, 75, 95, 105, 111, 117, 123, 129],
             [16, 36, 56, 76, 96, 106, 112, 118, 124, 130],
             [17, 37, 57, 77, 97],
             [18, 38, 58, 78, 98],
             [19, 39, 59, 79, 99],
             [20, 40, 60, 80, 100]]


    numQ = [10, 10, 10, 5, 5, 5, 5, 5, 5, 5, 5, 10, 5, 5, 10, 10, 5, 5, 5, 5]

    scales  = [Gp, Gm, Up, Um, Tp, Tm, Zp, Zm, Sp, Sm, N, Rrch, Pdk, Vn, Fu, Nrch, Pnk, Vk, Pgk, Pmk]

    def prBall(g, h, i):
        x = 0
        while (x<g):
            ax1 = h - 1
            axfin = answers[ax1]
            if (axfin == 1):
                i = i + 1
                scales[y] = i
            elif (axfin == 0):
                i = i + 0
                scales[y] = i
            x = x + 1

    y = 0 
    while (y<20):
        g = numQ[y]
        h = scale[y][x]
        i = scales[y]
        prBall(g, h, i)
        y = y + 1
    
    Gp = scales[0]
    Gm = scales[1]
    Up = scales[2] 
    Um = scales[3] 
    Tp = scales[4] 
    Tm = scales[5] 
    Zp = scales[6]
    Zm = scales[7] 
    Sp = scales[8] 
    Sm = scales[9]
    N = scales[10]
    Rrch = scales[11]
    Pdk = scales[12]
    Vn = scales[13]
    Fu = scales[14]
    Nrch = scales[15]
    Pnk = scales[16]
    Vk = scales[17]
    Pgk = scales[18]
    Pmk = scales[19]

    print(Gp, " баллов по шкале гиперпротекции")
    print(Gm, " баллов по шкале гипопротекции")
    print(Up, " баллов по шкале потворствования")
    print(Um, " баллов по шкале игнорирования потребностей")
    print(Tp, " баллов по шкале чрезмерности требований-обязанностей")
    print(Tm, " баллов по шкале недостаточности требований-обязанностей")
    print(Zp, " баллов по шкале чрезмерности требований-запретов")
    print(Zm, " баллов по шкале недостаточности требований-запретов")
    print(Sp, " баллов по шкале чрезмерности санкций")
    print(Sm, " баллов по шкале недостаточности санкций")
    print(N, " баллов по шкале неустойчивости стиля воспитания")
    print(Rrch, " баллов по шкале расширения сферы родительских чувств")
    print(Pdk, " баллов по шкале предпочтения в подростке детских качеств")
    print(Vn, " баллов по шкале воспитательной неуверенности родителя")
    print(Fu, " баллов по шкале фобии утраты ребенка")
    print(Nrch, " баллов по шкале неразвитости родительских чувств")
    print(Pnk, " баллов по шкале проекции на ребенка")
    print(Vk, " баллов по шкале вынесения конфликта между супругами на ребенка")
    print(Pgk, " баллов по шкале предпочтения женских качеств")
    print(Pmk, " баллов по шкале предпочтения мужских качеств")

    save(("Имя: " + name + "\nВозраст: " + str(age) + " лет\n" +
    str(Gp) + " баллов по шкале гиперпротекции\n" +
    str(Gm) + " баллов по шкале гипопротекции\n" +
    str(Up) + " баллов по шкале потворствования\n" +
    str(Um) + " баллов по шкале игнорирования потребностей\n" +
    str(Tp) + " баллов по шкале чрезмерности требований-обязанностей\n" +
    str(Tm) + " баллов по шкале недостаточности требований-обязанностей\n" +
    str(Zp) + " баллов по шкале чрезмерности требований-запретов\n" +
    str(Zm) + " баллов по шкале недостаточности требований-запретов\n" +
    str(Sp) + " баллов по шкале чрезмерности санкций\n" +
    str(Sm) + " баллов по шкале недостаточности санкций\n" + 
    str(N) + " баллов по шкале неустойчивости стиля воспитания\n" + 
    str(Rrch) + " баллов по шкале расширения сферы родительских чувств\n" +
    str(Pdk) + " баллов по шкале предпочтения в подростке детских качеств\n" +
    str(Vn) + " баллов по шкале воспитательной неуверенности родителя\n" +
    str(Fu) + " баллов по шкале фобии утраты ребенка\n" +
    str(Nrch) + " баллов по шкале неразвитости родительских чувств\n" +
    str(Pnk) + " баллов по шкале проекции на ребенка\n" +
    str(Vk) + " баллов по шкале вынесения конфликта между супругами на ребенка\n" +
    str(Pgk) + " баллов по шкале предпочтения женских качеств\n" +
    str(Pmk) + " баллов по шкале предпочтения мужских качеств\n"))

def whattest(): #Выбор теста
    wtest = input("\nКакой тест Вы хотите пройти?\
\n1 - Шкала депрессии Бека\n2 - Шкала тревоги Спилбергера-Ханина\n3 - MMPI (СМИЛ)\n4 - Анализ семейных взаимоотношений\n5 - Я устал от тестов. Давайте завершим.\n")
    if (wtest == "1"):
        scaleBek()
    elif (wtest == "2"):
        trevogaSH()
    elif (wtest == "3"):
        mmpi()
    elif (wtest == "4"):
        asv()
    elif (wtest == "5"):
        print("\nУдачи Вам! :)")
        time.sleep(2)
        exit(0)
    else:
        print("\nНеверная команда")
        whattest()


def save(t1): #Сохранение результатов теста в файл
    sav = input("\nСохранить результаты теста? (да/нет): ")
    if (sav == "да"):
        filename = name + "." + str(age) + ".txt"
        with open(filename, 'w') as file:
            print(t1, file=file, end='\n')
        file.close
        whattest()
    elif (sav == "нет"):
        print("\nСпасибо за участие! :)")
        time.sleep(1)
        whattest()
    else:
        print("\nНеверная команда")
        save()


if __name__== "__main__":
    sys.exit(hello())
